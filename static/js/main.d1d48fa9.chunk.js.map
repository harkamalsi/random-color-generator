{"version":3,"sources":["LandingCircles.js","App.js","registerServiceWorker.js","index.js"],"names":["Circle","_useState","useState","_useState2","Object","slicedToArray","isToggled","setToggle","_useState3","_useState4","isColorChanged","setColorChanged","randomColor","color","i","Math","floor","random","fade","useSpring","from","opacity","animationIterationCount","transform","backgroundColor","fade2","react_default","a","createElement","web","div","className","console","log","id","onClick","style","App","LandingCircles","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d1d48fa9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport \"./App.css\";\r\n\r\nconst Circle = () => {\r\n  const [isToggled, setToggle] = useState(false);\r\n  const [isColorChanged, setColorChanged] = useState(false);\r\n\r\n  const randomColor = () => {\r\n    let letters = \"0123456789ABCDEF\";\r\n    let color = \"#\";\r\n\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  const fade = useSpring({\r\n    from: {\r\n      opacity: 0,\r\n      animationIterationCount: isToggled ? 0 : \"infinite\",\r\n      transform: \"scale(1)\"\r\n    },\r\n    opacity: 0.75,\r\n    backgroundColor: isColorChanged ? randomColor() : randomColor(),\r\n    animationIterationCount: isToggled ? \"infinite\" : 0,\r\n    transform: isToggled ? \"scale(1)\" : \"scale(0)\",\r\n  });\r\n\r\n  const fade2 = useSpring({\r\n    from: {\r\n      opacity: 0,\r\n      animationIterationCount: isToggled ? 0 : \"infinite\",\r\n    },\r\n    opacity: 0.75,\r\n    backgroundColor: isColorChanged ? randomColor() : randomColor(),\r\n    animationIterationCount: isToggled ? \"infinite\" : 0,\r\n    transform: isToggled ? \"scale(1)\" : \"scale(0)\",\r\n    //animation-iteration-count: infinite;\r\n  });\r\n\r\n  return (\r\n    <animated.div className=\"circles\">\r\n      {console.log(isToggled)\r\n      }\r\n      <div id=\"centerCircle\" onClick={() => setToggle(!isToggled)} />\r\n      <animated.div\r\n        id=\"circle1\"\r\n        style={fade}\r\n        onClick={() => setColorChanged(!isColorChanged)}\r\n      >\r\n        <p id=\"colorName1\" />\r\n      </animated.div>\r\n      <animated.div\r\n        id=\"circle2\"\r\n        style={fade2}\r\n        onClick={() => setColorChanged(!isColorChanged)}\r\n      >\r\n        <p id=\"colorName2\" />\r\n      </animated.div>\r\n      <animated.div\r\n        id=\"circle3\"\r\n        style={fade}\r\n        onClick={() => setColorChanged(!isColorChanged)}\r\n      >\r\n        <p id=\"colorName3\" />\r\n      </animated.div>\r\n      <animated.div\r\n        id=\"circle4\"\r\n        style={fade}\r\n        onClick={() => setColorChanged(!isColorChanged)}\r\n      >\r\n        <p id=\"colorName4\" />\r\n      </animated.div>\r\n      <animated.div\r\n        id=\"circle5\"\r\n        style={fade}\r\n        onClick={() => setColorChanged(!isColorChanged)}\r\n      >\r\n        <p id=\"colorName5\" />\r\n      </animated.div>\r\n    </animated.div>\r\n  );\r\n};\r\n\r\nexport default Circle;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport Circle from \"./LandingCircles\";\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <animated.div className=\"App\">\r\n                <Circle />\r\n            </animated.div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default App;","const isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();"],"sourceRoot":""}